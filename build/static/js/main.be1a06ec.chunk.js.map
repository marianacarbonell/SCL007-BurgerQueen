{"version":3,"sources":["firebase.js","Components/NameForm.js","Components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","db","firestore","NameForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","name","handleChange","bind","assertThisInitialized","handleSubmit","event","setState","target","value","preventDefault","collection","add","Cliente","then","catch","react_default","a","createElement","className","onSubmit","type","placeHolder","onChange","onClick","Component","NavbarPag","Navbar_default","Brand","href","Toggle","aria-controls","Collapse","id","Nav_default","App","class","Components_Navbar","Components_NameForm","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","Route","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.be1a06ec.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/app';\nimport 'firebase/firestore';\n\nfirebase.initializeApp(\n\n{\n        apiKey: \"AIzaSyDQ-Q2o_2FrdmhVp2DGPzmADcwtgBUMUHI\",\n        authDomain: \"burgerqueen-52feb.firebaseapp.com\",\n        databaseURL: \"https://burgerqueen-52feb.firebaseio.com\",\n        projectId: \"burgerqueen-52feb\",\n});\n\nconst db = firebase.firestore();\n\nexport default db;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport db from '../firebase';\n\n\nclass NameForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: ''\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({\n            name: event.target.value\n        })\n    };\n\n\n    handleSubmit(event) {\n        event.preventDefault();\n        this.setState({\n            name: ''\n        })\n\n        db.collection('Pedidos').add({\n            Cliente: this.state.name\n        }).then(() => {\n        }).catch(() => {\n        })\n    }\n    render() {\n        return (\n            <div className=\"app\">\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <form onSubmit={this.handleSubmit}>\n                            <input type=\"text\" value={this.state.name} placeHolder=\"Nombre del Cliente\" className=\"form-control form-control-lg mt-2\" onChange={this.handleChange} />\n                        </form>\n                    </div>\n                    <div className=\"container\">\n                    <div className=\"btn-lg col-md-6\">\n                        <input type=\"submit\" value=\"Desayuno\" onClick={this.handleSubmit} />\n                        <input type=\"submit\" value=\"Almuerzo / Cena\" onClick={this.handleSubmit} />\n                    </div>\n                    <div className=\"col-md-6\">\n                        <input type=\"submit\" className=\"btn btn-info mt-2\" value=\"Enviar\" onClick={this.handleSubmit} />\n                    </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\nexport default NameForm;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\n\n\nclass NavbarPag extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n\n    render() {\n        return (\n            <nav className=\"navbar navbar-light navbar-expand-lg bg-light\">\n                <Navbar.Brand href=\"#home\">BurgerQueen</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                    </Nav>\n                </Navbar.Collapse>\n            </nav>\n        );\n    }\n\n}\nexport default NavbarPag;","import React, { Component } from 'react';\nimport NameForm from './Components/NameForm'; \nimport { Link } from 'react-router-dom';\nimport firebase from './firebase';\nimport { Button } from 'react-bootstrap';\nimport NavbarPag from'./Components/Navbar'; \n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div class=\"app\">\n      <div class=\"panel-heading\">\n      <NavbarPag/>\n      </div>\n      <NameForm />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <Router>\n      <div>\n        <Route exact path='/' component={App} />\n      </div>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}